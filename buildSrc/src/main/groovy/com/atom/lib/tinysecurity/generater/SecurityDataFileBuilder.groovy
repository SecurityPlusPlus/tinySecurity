package com.atom.lib.tinysecurity.generater

import com.atom.lib.tinysecurity.extension.KeyExt
import com.atom.lib.tinysecurity.utils.AESEncrypt
import com.atom.lib.tinysecurity.utils.LogUtils
import com.atom.lib.tinysecurity.utils.StringUtils
import org.apache.commons.codec.binary.Base64


class SecurityDataFileBuilder {
    private List<KeyExt> keys
    private String fileName
    private String encryptKey = ""
    private String encryptMode = ""
    private String encryptIV = ""

    SecurityDataFileBuilder(String fileName, List<KeyExt> keys) {
        this.fileName = fileName
        this.keys = keys
    }

    SecurityDataFileBuilder setEncryptKey(String key) {
        this.encryptKey = key
        this
    }

    SecurityDataFileBuilder setEncryptMode(String mode) {
        this.encryptMode = mode
        this
    }

    SecurityDataFileBuilder setEncryptIV(String iv) {
        this.encryptIV = iv
        this
    }


    /**
     * 默认使用CBC 加密模式 iv 默认16个0
     * @return
     */
    List<String> build() {
        List<String> lines = new ArrayList<>()
        def headerName = fileName.replaceAll("\\.", "_").replaceAll("-", "_").toUpperCase(Locale.US)
        lines.add("// Auto-Generated By tinySecurity \n\n")
        lines.add("#ifndef $headerName\n")
        lines.add("#define $headerName\n\n")

        lines.add("#define ENCRYPT_KEY \"$encryptKey\" \n\n")

        if (encryptMode != null && encryptMode != "") {
            if ("ECB".equals(encryptMode)) {
                lines.add("#define ENCRYPT_MODE 1 \n\n")
            } else if ("CBC".equals(encryptMode)) {
                lines.add("#define ENCRYPT_MODE 2 \n\n")
            } else {
                lines.add(" \n\n")
            }
        }

        byte[] realIV = null
        if (encryptIV != null && encryptIV != "") {
            lines.add("#define ENCRYPT_IV \"$encryptIV\" \n\n")
            realIV = Base64.decodeBase64(encryptIV)
            LogUtils.Log("real IV = ${Arrays.toString(realIV)}")
        }

        lines.add("#define LOAD_MAP(_map) \\\n")
        keys.each {
            lines.add("    _map[\"${StringUtils.md5(it.name)}\"] = \"${AESEncrypt.encrypt(encryptMode, encryptKey, it.value, realIV)}\"; \\\n")
        }
        lines.add("\n")
        lines.add("#endif //$headerName\n\n")
        lines
    }


}